{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6c5f\u5b50\u626c\u7684\u7b14\u8bb0 \u6b22\u8fce\uff5e","title":"\u6c5f\u5b50\u626c\u7684\u7b14\u8bb0"},{"location":"#_1","text":"\u6b22\u8fce\uff5e","title":"\u6c5f\u5b50\u626c\u7684\u7b14\u8bb0"},{"location":"LeetCode/1687._Delivering_Boxes_from_Storage_to_Ports/","tags":["LeetCode","Algorithms"],"text":"Analyse As the dynamic programming solution's max time complexity is $\\text O(n^2)$. We could simply get the first solution:\\ This Code comes from linshan077 . And it is almost the best implement of DP. Where the trip assist to decline the cost of repeatedly judging boxes[j][0] == boxes[j-1][0] and dp is the common implement of dynamic programming. class Solution1 { public: int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) { vector<int> trips(boxes.size()); trips[0] = 0; for (int i = 1; i < boxes.size(); ++i) { if (boxes[i][0] == boxes[i-1][0]) { trips[i] = trips[i-1]; } else { trips[i] = trips[i-1]+1; } } // dp[i+1] is minimum trips assuming i is the last box to deliver and will return to port afterwards. vector<int> dp(boxes.size()+1); dp[0] = 0; for (int i = 0; i < boxes.size(); ++i) { dp[i+1] = INT_MAX; int sum_weights = 0; for (int j = i; j>=0 && i-j+1 <= maxBoxes; --j) { sum_weights += boxes[j][1]; if (sum_weights > maxWeight) break; dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]); } } return dp.back(); } }; However, it got a TLE. And we translate min(dp[j]+2+trips[i]-trips[j]) into 2+trips[i]+min(dp[j]-trips[j]) . It turns to a question: find the minimum in a Slide window(Which we can easily solve by a deque with total time complexity $\\text O(n)$). class Solution2 { public: int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) { vector<int> trips(boxes.size()); trips[0] = 0; for (int i = 1; i < boxes.size(); ++i) { if (boxes[i][0] == boxes[i-1][0]) { trips[i] = trips[i-1]; } else { trips[i] = trips[i-1]+1; } } vector<long int> weights(boxes.size()+1); weights[0] = 0; for (int i = 0; i < boxes.size(); ++i) { weights[i+1] = weights[i]+boxes[i][1]; } vector<int> dp(boxes.size()+1); dp[0] = 0; vector<long> weight(boxes.size()+1); weight[0] = 0; for(int i = 1; i != boxes.size()+1; ++i) weight[i] = weight[i-1] + boxes[i-1][1]; deque<pair<int,int>> dq; int temp, totalWeight, totalBoxes; int j = 0; dq.push_back({0,dp[0] - trips[0]}); dp[1] = 2 + trips[0] + dq.front().second; for (int i = 1; i < boxes.size(); ++i) { temp = dp[i] - trips[i]; while (!dq.empty() && dq.back().second > temp) dq.pop_back(); dq.push_back({i,temp}); totalWeight = weight[i+1] - weight[j]; totalBoxes = i - j + 1; while (totalWeight > maxWeight || totalBoxes > maxBoxes){ dq.pop_front(); j = dq.front().first; totalWeight = weight[i+1] - weight[j]; totalBoxes = i - j + 1; } dp[i+1] = 2 + trips[i] + dq.front().second; } return dp.back(); } }; The above code deducts the cost of repetitive calculation of dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]) And turns $\\text O(mn)$(where m is the maxBoxes) into $\\text O(n) + \\text O(n) = \\text O(n)$. Reference C++ DP solution with thinking process: brute force -> priority queue -> mono queue Java | From O(N^2) to O(N) | MonoQueue w/ DP","title":"LeetCode 1687. Delivering Boxes from Storage to Ports"},{"location":"LeetCode/1687._Delivering_Boxes_from_Storage_to_Ports/#analyse","text":"As the dynamic programming solution's max time complexity is $\\text O(n^2)$. We could simply get the first solution:\\ This Code comes from linshan077 . And it is almost the best implement of DP. Where the trip assist to decline the cost of repeatedly judging boxes[j][0] == boxes[j-1][0] and dp is the common implement of dynamic programming. class Solution1 { public: int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) { vector<int> trips(boxes.size()); trips[0] = 0; for (int i = 1; i < boxes.size(); ++i) { if (boxes[i][0] == boxes[i-1][0]) { trips[i] = trips[i-1]; } else { trips[i] = trips[i-1]+1; } } // dp[i+1] is minimum trips assuming i is the last box to deliver and will return to port afterwards. vector<int> dp(boxes.size()+1); dp[0] = 0; for (int i = 0; i < boxes.size(); ++i) { dp[i+1] = INT_MAX; int sum_weights = 0; for (int j = i; j>=0 && i-j+1 <= maxBoxes; --j) { sum_weights += boxes[j][1]; if (sum_weights > maxWeight) break; dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]); } } return dp.back(); } }; However, it got a TLE. And we translate min(dp[j]+2+trips[i]-trips[j]) into 2+trips[i]+min(dp[j]-trips[j]) . It turns to a question: find the minimum in a Slide window(Which we can easily solve by a deque with total time complexity $\\text O(n)$). class Solution2 { public: int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) { vector<int> trips(boxes.size()); trips[0] = 0; for (int i = 1; i < boxes.size(); ++i) { if (boxes[i][0] == boxes[i-1][0]) { trips[i] = trips[i-1]; } else { trips[i] = trips[i-1]+1; } } vector<long int> weights(boxes.size()+1); weights[0] = 0; for (int i = 0; i < boxes.size(); ++i) { weights[i+1] = weights[i]+boxes[i][1]; } vector<int> dp(boxes.size()+1); dp[0] = 0; vector<long> weight(boxes.size()+1); weight[0] = 0; for(int i = 1; i != boxes.size()+1; ++i) weight[i] = weight[i-1] + boxes[i-1][1]; deque<pair<int,int>> dq; int temp, totalWeight, totalBoxes; int j = 0; dq.push_back({0,dp[0] - trips[0]}); dp[1] = 2 + trips[0] + dq.front().second; for (int i = 1; i < boxes.size(); ++i) { temp = dp[i] - trips[i]; while (!dq.empty() && dq.back().second > temp) dq.pop_back(); dq.push_back({i,temp}); totalWeight = weight[i+1] - weight[j]; totalBoxes = i - j + 1; while (totalWeight > maxWeight || totalBoxes > maxBoxes){ dq.pop_front(); j = dq.front().first; totalWeight = weight[i+1] - weight[j]; totalBoxes = i - j + 1; } dp[i+1] = 2 + trips[i] + dq.front().second; } return dp.back(); } }; The above code deducts the cost of repetitive calculation of dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]) And turns $\\text O(mn)$(where m is the maxBoxes) into $\\text O(n) + \\text O(n) = \\text O(n)$.","title":"Analyse"},{"location":"LeetCode/1687._Delivering_Boxes_from_Storage_to_Ports/#reference","text":"C++ DP solution with thinking process: brute force -> priority queue -> mono queue Java | From O(N^2) to O(N) | MonoQueue w/ DP","title":"Reference"},{"location":"LeetCode/188._Best_Time_to_Buy_and_Sell_Stock_IV/","tags":["LeetCode","Algorithms"],"text":"Analyse This is another dynamic programming problem similar to 1687. Delivering Boxes from Storage to Ports . And however, with a limitation of purchase times. We can just use two iteration on this question. One is the iteration of vector prices(obviously), and another is the iteration of purchase times k. What's more, we need to purchase a good before selling it. Thus we need to record the purchases. And the code is as below class Solution { public: int maxProfit(int k, vector<int>& price) { vector<int> profit(2*k+1, INT_MIN); //if we do nothing, the profit is 0 without doubt profit[0] = 0; //the iteration of prices vector for(int j = 0; j < price.size(); j++) { //the iteration of transaction times /*for each i, profit[i+1] is the profit with a good in stock, *and profit[i+2] is the profit after selling goods. */ for(int i = 0; i+2 <= 2*k; i += 2){ profit[i+1] = max(profit[i+1], profit[i]-price[j]); profit[i+2] = max(profit[i+2], profit[i+1]+price[j]); } } return *max_element(profit.begin(), profit.end()); } }; Reference 1687. Delivering Boxes from Storage to Ports \u2705Easy solution Explained || Beginner Friendly \ud83d\udd25||\u2714\ufe0f Best Method","title":"LeetCode 188. Best Time to Buy and Sell Stock IV"},{"location":"LeetCode/188._Best_Time_to_Buy_and_Sell_Stock_IV/#analyse","text":"This is another dynamic programming problem similar to 1687. Delivering Boxes from Storage to Ports . And however, with a limitation of purchase times. We can just use two iteration on this question. One is the iteration of vector prices(obviously), and another is the iteration of purchase times k. What's more, we need to purchase a good before selling it. Thus we need to record the purchases. And the code is as below class Solution { public: int maxProfit(int k, vector<int>& price) { vector<int> profit(2*k+1, INT_MIN); //if we do nothing, the profit is 0 without doubt profit[0] = 0; //the iteration of prices vector for(int j = 0; j < price.size(); j++) { //the iteration of transaction times /*for each i, profit[i+1] is the profit with a good in stock, *and profit[i+2] is the profit after selling goods. */ for(int i = 0; i+2 <= 2*k; i += 2){ profit[i+1] = max(profit[i+1], profit[i]-price[j]); profit[i+2] = max(profit[i+2], profit[i+1]+price[j]); } } return *max_element(profit.begin(), profit.end()); } };","title":"Analyse"},{"location":"LeetCode/188._Best_Time_to_Buy_and_Sell_Stock_IV/#reference","text":"1687. Delivering Boxes from Storage to Ports \u2705Easy solution Explained || Beginner Friendly \ud83d\udd25||\u2714\ufe0f Best Method","title":"Reference"},{"location":"LeetCode/1932._Merge_BSTs_to_Create_Single_BST/","tags":["LeetCode","Algorithms"],"text":"Analyse {% note danger simple %} This question should be a medium question \ud83d\ude02 {% endnote %} This question doesn't request any profound algorithms but does need to notice many details. Let's build this tree step by step. First, we need to find the tree's root. And we can guarantee that the root node must exists only once. And it must be the only node exists only one time. map<int, TreeNode *> val2Tree; map<int,int> val2count; for(auto &t : trees){ val2Tree[t->val] = t; ++val2count[t->val]; //to avoid dereferencing nullptr ++val2count[t->left ? t->left->val : 0]; ++val2count[t->right ? t->right->val : 0]; } Then, we could build the Tree from the root node for(auto &t : trees){ if(val2count[t->val] == 1){ //details } } //If there is no valid root node, we can't build a BST return nullptr; Now, we just need to link each node from top to bottom. bool TreeLink(TreeNode *Tree, map<int, TreeNode *> &val2Tree, int minLeft = INT_MIN, int maxRight = INT_MAX) { // If this node has no child node, it is obviously valid if (Tree == nullptr) return true; // We need to judge if this node satisfies the value scope of BST if (Tree->val <= minLeft || Tree->val >= maxRight) return false; // If Tree has no child(where Tree->left == nullptr == Tree->right), // find the node with the same value and link them. if (Tree->left == Tree->right) { auto temp = val2Tree.find(Tree->val); // If the node exists and be different from Tree if (temp != val2Tree.end() && Tree != temp->second) { Tree->left = temp->second->left; Tree->right = temp->second->right; // after linking, we needn't to notice this node anymore val2Tree.erase(temp); } } // iteration from top to bottom. /** * we need to adjust the child node's scope, where its left child's * max value shouldn't be more than its value. And vice versa */ return TreeLink(Tree->left, val2Tree, minLeft, Tree->val) && TreeLink(Tree->right, val2Tree, Tree->val, maxRight); } Whole Solution class Solution { public: bool TreeLink(TreeNode *Tree, map<int, TreeNode *> &val2Tree, int minLeft = INT_MIN, int maxRight = INT_MAX) { // If this node has no child node, it is obviously valid if (Tree == nullptr) return true; // We need to judge if this node satisfies the value scope of BST if (Tree->val <= minLeft || Tree->val >= maxRight) return false; // If Tree has no child(where Tree->left == nullptr == Tree->right), // find the node with the same value and link them. if (Tree->left == Tree->right) { auto temp = val2Tree.find(Tree->val); // If the node exists and be different from Tree if (temp != val2Tree.end() && Tree != temp->second) { Tree->left = temp->second->left; Tree->right = temp->second->right; // after linking, we needn't to notice this node anymore val2Tree.erase(temp); } } // iteration from top to bottom. /** * we need to adjust the child node's scope, where its left child's * max value shouldn't be more than its value. And vice versa */ return TreeLink(Tree->left, val2Tree, minLeft, Tree->val) && TreeLink(Tree->right, val2Tree, Tree->val, maxRight); } TreeNode *canMerge(vector<TreeNode *> &trees) { map<int, TreeNode *> val2Tree; map<int, int> val2count; for (auto &t: trees) { val2Tree[t->val] = t; ++val2count[t->val]; //to avoid dereferencing nullptr ++val2count[t->left ? t->left->val : 0]; ++val2count[t->right ? t->right->val : 0]; } for (auto &t: trees) { if (val2count[t->val] == 1) { /* * If val2Tree's size dosen't equal to 1, there must be some * danling node which exists only once too. */ return TreeLink(t, val2Tree) && val2Tree.size() == 1 ? t : nullptr; } } //If there is no valid root node, we can't build a BST return nullptr; } }; Reference 1932. Merge BSTs to Create Single BST","title":"LeetCode 1932. Merge BSTs to Create Single BST"},{"location":"LeetCode/1932._Merge_BSTs_to_Create_Single_BST/#analyse","text":"{% note danger simple %} This question should be a medium question \ud83d\ude02 {% endnote %} This question doesn't request any profound algorithms but does need to notice many details. Let's build this tree step by step. First, we need to find the tree's root. And we can guarantee that the root node must exists only once. And it must be the only node exists only one time. map<int, TreeNode *> val2Tree; map<int,int> val2count; for(auto &t : trees){ val2Tree[t->val] = t; ++val2count[t->val]; //to avoid dereferencing nullptr ++val2count[t->left ? t->left->val : 0]; ++val2count[t->right ? t->right->val : 0]; } Then, we could build the Tree from the root node for(auto &t : trees){ if(val2count[t->val] == 1){ //details } } //If there is no valid root node, we can't build a BST return nullptr; Now, we just need to link each node from top to bottom. bool TreeLink(TreeNode *Tree, map<int, TreeNode *> &val2Tree, int minLeft = INT_MIN, int maxRight = INT_MAX) { // If this node has no child node, it is obviously valid if (Tree == nullptr) return true; // We need to judge if this node satisfies the value scope of BST if (Tree->val <= minLeft || Tree->val >= maxRight) return false; // If Tree has no child(where Tree->left == nullptr == Tree->right), // find the node with the same value and link them. if (Tree->left == Tree->right) { auto temp = val2Tree.find(Tree->val); // If the node exists and be different from Tree if (temp != val2Tree.end() && Tree != temp->second) { Tree->left = temp->second->left; Tree->right = temp->second->right; // after linking, we needn't to notice this node anymore val2Tree.erase(temp); } } // iteration from top to bottom. /** * we need to adjust the child node's scope, where its left child's * max value shouldn't be more than its value. And vice versa */ return TreeLink(Tree->left, val2Tree, minLeft, Tree->val) && TreeLink(Tree->right, val2Tree, Tree->val, maxRight); }","title":"Analyse"},{"location":"LeetCode/1932._Merge_BSTs_to_Create_Single_BST/#whole-solution","text":"class Solution { public: bool TreeLink(TreeNode *Tree, map<int, TreeNode *> &val2Tree, int minLeft = INT_MIN, int maxRight = INT_MAX) { // If this node has no child node, it is obviously valid if (Tree == nullptr) return true; // We need to judge if this node satisfies the value scope of BST if (Tree->val <= minLeft || Tree->val >= maxRight) return false; // If Tree has no child(where Tree->left == nullptr == Tree->right), // find the node with the same value and link them. if (Tree->left == Tree->right) { auto temp = val2Tree.find(Tree->val); // If the node exists and be different from Tree if (temp != val2Tree.end() && Tree != temp->second) { Tree->left = temp->second->left; Tree->right = temp->second->right; // after linking, we needn't to notice this node anymore val2Tree.erase(temp); } } // iteration from top to bottom. /** * we need to adjust the child node's scope, where its left child's * max value shouldn't be more than its value. And vice versa */ return TreeLink(Tree->left, val2Tree, minLeft, Tree->val) && TreeLink(Tree->right, val2Tree, Tree->val, maxRight); } TreeNode *canMerge(vector<TreeNode *> &trees) { map<int, TreeNode *> val2Tree; map<int, int> val2count; for (auto &t: trees) { val2Tree[t->val] = t; ++val2count[t->val]; //to avoid dereferencing nullptr ++val2count[t->left ? t->left->val : 0]; ++val2count[t->right ? t->right->val : 0]; } for (auto &t: trees) { if (val2count[t->val] == 1) { /* * If val2Tree's size dosen't equal to 1, there must be some * danling node which exists only once too. */ return TreeLink(t, val2Tree) && val2Tree.size() == 1 ? t : nullptr; } } //If there is no valid root node, we can't build a BST return nullptr; } };","title":"Whole Solution"},{"location":"LeetCode/1932._Merge_BSTs_to_Create_Single_BST/#reference","text":"1932. Merge BSTs to Create Single BST","title":"Reference"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/","tags":["C++","Notes"],"text":"C++ learning notes Generic algorithm lambda [capture list] (parameter list) -> return type {function body} we can ignore the parameter list and return type , but the capture list and the function body must be reserved eg: [](const string &a, const string &b) {return a.size() < b.size();} dynamic memory shared_ptr<> use function make_shared<>() unique_ptr<> must be initialized once the pointer is created weak_ptr<> can be assigned allocator allocator<string> alloc; auto const p = alloc.allocate(n); weak_ptr<string[]> q = p; for(int i = 0; i != n; ++ i){ alloc.construct(q++, \"hello world!\"); } for (int i = 0; i != n; ++i) { cout << *(p + i) << endl; } alloc.deallocate(p,n); cpp delete p; //provided p points to an object or be nullptr delete [] p; //provided p points to an array or be nullptr Copy, Assign and Destroy specific member function to control above three operations copy constructor copy-assignment operator move constructor move-assignment operator destructor copy constructor class Foo { public: /* *default defination in class body is inline *if we don't hope so, we need to define \"= default\" out of the class body *generally, function defined in class body is inline */ Foo() = default; //default constructor Foo(const Foo&); //copy constructor //first parameter must be a reference, and almost always be a const reference } class Foo2{ public: //explicit prevents implicit conversion explicit Foo2() = default; explicit Foo2(int num): n(num) {} private: int n; }; copy-assignment constructor class Foo { public: /* *we define a copy-assignment constructor below *keyword operator+symbol is an overloaded operator *which defines an operator(like =,+,- and so on) */ Foo &operator=(const Foo& f){ this->n = f->n; return *this; } private: int n; } int main(){ Foo f1, f2(); //f2 is default initialized f1 = f2; //equals to f1(f2) }; stop the copy if we don't want a copy operation, we need to define it as the delete function class NoCopy { public: NoCopy() = default; /* *\"= delete\" must be present when we firstly declare it. * *by the way, we can delete any functions(except the destructor), *thongh i haven't clearly understood its effect and affect. *one interesting and meaningful example is, if a class's member *can't be implicitly initialized, copied, assigned or destroied, *its implicit initializer's member function is deleted. *It prevents from creating indestructible object. * *principle: destructor can't be delete */ NoCopy(const NoCopy &) = delete; //stop the copy NoCopy &operator=(const NoCopy &) = delete; //stop the copy-assignment ~NoCopy() = default; /* *we can put the copy constructor into private zone to prevent from copying it. *we need to declare it in the private zone first *then define it in the public zone.(in order to prevent friend use it) *however, this practice is not recommended. */ } destructor destructor delete the resource used by objects, and destruct non-static elements it is used whenever the object is destroyed implicitly destruct a pointer won't delete the object it points. on the contrary, smart pointer is class type with destructor, thus it can delete the object class Foo { public: ~Foo() = default; //destructor.this function can't be overloaded }; principle define destructor before assuring weather it needs a destructor or not if a class needs a copy constructor, it always need a copy-assignment constructor. And vice verse copy control and resource management behave like a value: the copy and the original object is fully independent behave like a pointer: the copy and the original object point to the same underlying data classes which behave like a value class HasPtr { public: HasPtr(const std::string &s = std::string()): ps(new std::string(s)), i(0) {} //every HasPtr's copy has its own string member with equal value HasPtr(const HasPtr &p): ps(new std::string(*(p.ps))), i(p.i) {} /* *most copy assignment constructor combines the function *of destructor and copy constructor. * *for instance, copy assignment constructor *destroys the left side object's resource as destructor, *and copies data from the right side object *to the left one like copy constructor * *if possible, copy assignment constructor should be exception safe. *which means when an exception occurs, *it can put the left side object in a meaningful state */ HasPtr &operator=(const HasPtr &); ~HasPtr() { delete ps; } private: std::string *ps; int i; }; /* *in this case, to ensure exception safety, *we copy the right object's data first *to ensure exception safety before assignment. *then we delete the resource of the left object and execute assignment */ HasPtr &HasPtr::operator=(const HasPtr &rhs) { auto newp = new std::string(*rhs.ps); delete ps; ps = newp; i = rhs.i; return *this; } classes which behave like a pointer use reference count to control the underlying data class HasPtr { public: HasPtr(const std::string &s = std::string()): ps(new std::string(s)), i(0), use(new std::size_t(1)) {} //copy the pointer to ensure they point to the same underlying data //increase the reference count HasPtr(const HasPtr &p): ps(p.ps), i(p.i), use(p.use) { ++*use; } HasPtr &operator=(const HasPtr &); ~HasPtr(); private: std::string *ps; int i; std::size_t *use; //reference count }; HasPtr::~HasPtr() { if (--*use == 0) { delete ps; delete use; } } HasPtr &HasPtr::operator=(const HasPtr &rhs) { ++*rhs.use; //execute the left object's destructor if (--*use == 0) { delete ps; delete use; } //execute assignment ps = rhs.ps; i = rhs.i; use = rhs.use; return *this; } swap we can swap the pointer to decrease extra memory allocation class HasPtr { friend void swap(HasPtr &, HasPtr &); } /* *if a menber of a class has its own swap function, *use the std::swap is an error *and if we implicitly use swap function, the compiler use the overloaded one by default */ inline void swap(HasPtr &lhs, HasPtr &rhs){ using std::swap; swap(lhs.ps,rhs.ps); swap(lhs.i, rhs.i); } int main(){ HasPtr h1(),h2(); using std::swap; swap(h1,h2); //use the overloaded one } //tip:this function can't overload the HasPtr &HasPtr::operator=(HasPtr &rhs) HasPtr &HasPtr::operator=(HasPtr rhs){ //parameter is a copy, not a reference swap(*this, rhs); return *this; //rhs is destroyed }; move constructor library container, string and shared_ptr class support both move and copy operation IO class and unique_ptr class can be moved, but can't be copied rvalue reference must be bound to an rvalue. we get rvalue reference through && instead of & rvalue reference must be bound to an object ready to be destroyed therefore, we can freely move an rvalue reference resource to another object moreover, we can bound a const lvalue reference to an rvalue, as well expression returns an rvalue. But rvalue reference variate itself is a lvalue eg: cpp int i = 42; int &r = i; const int &r2 = i * 42; int &&r3 = i * 42; int &&r4 = r3; //illegal all of them is legal except the last one std::move avails to use a lvalue as an rvalue. What's more, we must recognize that executing move means we promote not to use the original element unless we assign or destruct it. int &&r4 = std::move(r3); //legal //use std::move instead of move in order to prevent from potential naming conflict an example of move constructor StrVec::StrVec(StrVec &&s) noexcept //move operation shouldn't throw error //initializer take over resource of s : elements(s.elements), first_feet(s.first_feet), cap(s.cap) { s.elements = s.first_feet = s.cap = nullptr; //brilliant! //get the spark of controlling dynamic memory! //now destructing s is safe //i wander weather we permit s to be meaningfully assigned, //and after insperation, i find that void StrVec::push_back(const std::string &) //has considered this situation. Now both assignment and destruction is ligal. //and at the same time we can't read its value //(certainly i put the whole code into my cpp file to avoid making my notes bloated) } move assignment constructor StrVec &StrVec::operator=(StrVec &&rhs) noexcept { //check self-assignment //I guess this operation is designed to avoid freeing itself //otherwise it may move meaningless data and put itself in a meaningless state if (this != &rhs) { free(); //release itself elements = rhs.elements; first_feet = rhs.first_feet; cap = rhs.cap; //put rhs in a destructible state rhs.elements = rhs.first_feet = rhs.cap = nullptr; } return *this; } //copy and move operation's overload StrVec v1, v2; v1 = v2; //copy assignment constructor StrVec getVec(istream &); //getVec returns an rvalue //because getVec() dosen't return value instead of reference //up to now getVec() is just a declaration v2 = getVec(cin); //move assignment constructor /* *if we didn't define a move constructor *the compiler will convert an rvalue reference to a const reference *and call copy constructor */ reference qualifier C++ permit us to assign value to a rvalue object(so weird) eg: string s1(\"a\"), s2(3, 'b'); //s1 = \"a\", s2 = \"bbb\"; /* *(s1 + s2) is an rvalue which never affects s1 and s2's value without assignment *usually it is created by compiler and released soon *the following expression execute: * create a string temp_s = s1 + s2 = \"abbb\"; * assign \"Wow\" to temp_s and return \"Wow\"; * assign \"Wow\" to s3; * release temp_s *Just from my own guess.If there's something wrong, I'll correct it */ string s3 = (s1 + s2) = \"Wow\"; cout << s3 << endl; return 0; we can use the reference qualifier to enforce the left object is an lvalue or an rvalue class Foo { public: //the & in the back of parameter list enforce the left object is an lvalue Foo &operator=(const Foo&) &; // }; Foo &Foo::operator=(const Foo& rhs) &{ // return *this; } class Foo { public: Foo someMember() const &; //const should be in front of reference qualifier } reference qualifier and overloaded class Foo{ public: Foo sorted() &&; Foo sorted() const &; private: vector<int> data; }; //because object is an rvalue, we can change itself without any affection Foo Foo::sorted() &&{ sort(data.begin(), data.end()); return *this; } //object is an lvalue, thus we can't affect its value Foo Foo::sorted() const &{ Foo temp(*this); sort(temp.data.begin(), temp.data.end()); return temp; } overloading and type conversion basic concept an operator function should be a member of a class or have at least than one class type parameter which means we can't overload operators acting on the build-in type overloaded operator's priority and associative law is the same as the original operator operators can be overloaded + - * / % ^ & ~ ! , = < > <= >= ++ -- << >> == != && += -= /= %= ^= &= = *= <<= >>= [] () -> ->* new new[] delete delete[] operators can not be overloaded :: .* . ? : operators there are various of operators overloading practice. and you know, cujus rei demonstrationem mirabilem sane detexi. Hanc marginis exiguitas non caperet .(I'm sure I've discovered a wonderful demonstration, but the space here is too small to fill it). so I write them all down in my practice .cpp file and just note some announcements there. The essence of operator overloading is a function call. therefore we can't save the original order of evaluation and the short circuit evaluation. and that's why we don't advice you to overload comma, address, logic and, logic or. when we define an operator as a member function, its left operand must be an object of the operator's class. operator(=), index([]), call(()), member accession(->) operator must be member function of class. ostream(<<), istream(>>) can't be member function. index operator usually define two overloading versions, the const one and the nonconst one. increase and decrease operators usually be set as member functions. strBlobPtr &operator++(); //preoperator strBlobPtr operator++(int); //postoperator strBlobPtr strBlobPtr::operator++(int) { strBlobPtr ret = *this; ++*this; return ret; } if we overload the call operator, the object of this class is called function object, because we can call this object. function object is usually used as actual parameter of generic algorithm. moreover, lambda is an unnamed class' unnamed object, whose call operator is overloaded by lambda's function body. liberty functional defines a succession of function class as templates. and they are listed below. arithmetic relation logic plus equal_to logical_and minus not_equal_to logical_or multiplies greater logical_not divides greater_equal modulus less negate less_equal operator type () const is class-type conversions or be named user-define conversions. it allows a type to be an object's return type. this conversion is implicit. we can define explicit conversion operator to control class-type conversion. class SmallInt{ public: SmallInt(int i = 0): val(i) {} explicit operator int() const {return val;} operator=(int); private: int val; }; SmallInt si = 3; static_cast<int>(si) + 3; //explicitly request for type conversion however, if the conversion is used as a condition, the compiler will automatically execute the conversion. function table function, function pointer, function class, lambda expression, classes built by bind and any other classes which has overloaded the call operator are all callable object. function class defined in liberty functional can be used to reserve callable object. #include <functional> function<int(int, int)> f1 = add; //f1(4,2) == 6; //equal to add(4,2); //f1 == true; //f1 has a callable object; function<int(int, int)> f2 = [](int a, int b){return i * j;}; we can define a function table to reserve callable objects with same retType(args) . map<string, function<int(int,int)>> binops = { {\"+\", add}, //each element is a pair {\"-\", minus<int>()}, {\"/\", divide()}, {\"*\", [](int i, int j){return i * j;}}, {\"%\", mod}, }; //in this case, binos[\"+\"](4,2) == 6; Object-Oriented Programming inheritance class Quote { public: Quote() = default; Quote(const std::string &book, double sales_price): bookNo(book), price(sales_price) {} std::string isbn() const { return bookNo; } //key word virtual defines a virtual function //which means the base class permits drived classes to override it virtual double net_price(std::size_t n) const { return n * price; } //moreover, if we don't wish our clients use the base class' member function //we need to define this member function to be a pure virtual function as the following code row //notice :the pure virtual function can only be defined in the declaration body virtual double net_price(std::size_t n) const = 0; virtual ~Quote() = default; //dynamically bind destructor private: std::string bookNo; /* *key word protected serves for those members *which are not supposed to be used by object's users *but needed to be used by derived class */ protected: double price = 0.0; //common price without discount }; /* *type of class derivation list:colon and a list of base class *whose type is base class behind optional assess specifire *and splited by comma */ class Bulk_quote: public Quote { public: Buli_quote() = default; Built_quote(const std::string &, double, std::size_t, double); /* *key word override explicitly declare that this member function *will be used to redefine the base class' virtual function *if not, the compiler will throw error */ double net_price(std::size_t) const override; private: //the minimum purchase quantity of discount std::size_t min_qty = 0; double discount = 0.0; }; because derived class has its base class member, compiler can implicitly convert it into its base class as a reference or pointer. On the contrary, compiler doesn't allow us to implicitly convert base class object into derived class object. However, if we ensure this action's safety, we can use static_cast enforce the conversion. But this action is not recommended. What's more, if the base class has at least one virtual function, we can use dynamic_cast to check this conversion's safety and let the compiler divides whether allow or not. if a base class defines a static member, the whole inheritance system has only one instance no matter how many derived classes and objects have been defined. base class must be defined before defining derived classes. key word final restrict us from using a class as base class. key word final can be used to declare that a virtual function is the final function, which means this function can't be overrode. class NoDerived final {/*details*/} //illegal, we can't use Noderived as a base class class Bad: public NoDerived {/*details*/} virtual function can have acquiescent parameters, and its acquiescent parameters depend on the static type of the call. class Base{ public: virtual void funcion(int a = 0, int b = 1){/*details*/} } class Derived: public Base{ public: void function(int a = 1, int b = 2) override{/*details*/} } void execuse_function(Base &b){ b.function(); } int main(){ Derived d; execuse_function(d); //execuse Base::function(int a = 0, int b = 1); } scope notions: iff the derived class publicly inherits base class can users use the conversions between derived class and base class. if the derived class publicly or protected inherits base class, the derived class can use the conversions. if the derived class privately inherits base class, the derived class' objects and friends can't use the conversions. friend relationship can't be inherited. each class controls its members' accessible permissions. if we need to change a member's accessible permission, we can use the using declaration in the corresponding action scope class Base{ public: std::size_t size() const {return n;} protected: std::size_t n; } //we inherit the base class in the private scope class Derived: private Base{ public: //then Base::size() is public using Base::size; protected: using Base::n; } acquiescent derived scope operators depend on class' type. struct acquiescently owns public scope while class having private scope. derived class' scope is combined into base class' scope. thus derived class' member with the same name as base class' has higher priority. name lookup precedes type lookup. function declared in the inner scope won't override but cover the outer scope's function.(which remind us to use the override key word. otherwise we must ensure that the derived class's function has the same parameters list as the base class') struct Base{ int memfunc(); } struct Derived: Base{//Base's scope operator is public int memfunc(int); } Derived d; Base b; b.memfunc(); d.memfunc(10); d.memfunc(); //error:Base::memfunc() is hided. the right way is written below d.Base::memfunc(); dynamic binding double print_total(ostream &os, const Quote &item, size_t n) { //calling Quote::net_price or Bulk_quote::net_price //depends on item's object type //moreover, accessible members which we can use depend on the static type //for instance, this item below has no right to use Bulk_quote's unique public members double ret = item.net_price(n); os << \"ISBN: \" << item.isbn() << \"# sold: \" << n << \"total due: \" << ret << endl; return ret; } //if we don'y want to use dynamic binding, we need to explicitly declare the scope double ret = item->Quote::net_price(42); now, we need to consider this situation where we delete a derived object pointed by a base class pointer. we must ensure that the delete command executes the derived object's destructor. So we declare the base class' destructor as a virtual function to solve this problem. what's more, virtual destructor will impede generating movement operation. What's more, if we use containers to save objects, it is supposed to indirectly save it. An common usage is using pointer. Then we are able to use base class pointer calling derived objects. template template <typename T> //key word:template //<template T> is template parameter list //template parameters are divided by comma /* *moerover, key word typename is the same with key word class in this situation */ int compare(const T& v1, const T& v2) { if (v1 > v2) return -1; else if (v2 < v1) return 1; else return 0; } //type parameter can be used as return type or parameter type //it can be used as variables declaration and type translation, as well template <typename T> T foo(T* p) { T tmp = *p; //omitted details return T; } /* *we can define nontype parameter and the parameter's value is provided by *clients or compiler *in this case, compiler provide nontype parameters int values depends on *const char array's length *nontype parameter can be int, object/function pointer or lvalue reference */ template<unsigned N, unsigned M> int compare(const char (&p1)[N], const char (&p2)[M]){ return strcmp(p1,p2); } /* *template can be declared as inline or constexpr *this declaration should be put between template parameter list and return type */ template<typename T> inline T min(const T&, const T&); principle : template function's parameters are supposed to be const reference, which guarantees non-copyable object's availability. if we want to define a class member function out of the class body, it's type should be: template <typename> return-type class-name::member-name(parameter-list) {function-bod} By default, template class' member function is instantiated when it is called, which help us to use a template class even though there are some member function incompatible with a type, we can use part of class functions. friend declaration //friend declaration template <typename T> class Pal; class C { friend class Pal<C>; //Pal instantiated by class C is a friend template <typename T> friend class Pal2; //each instantiated Pal2 is C's friend }; template <typename T> class C2 { friend class Pal<T>; template <typename X> friend class Pal2;//each instantiated Pal2 is each instantiated C2's friend //notice: friend's typename should be different from template class' friend class Pal3; //Pal3 is a non-template class, every instantiated C2 is Pal3's friend }; //let template's typename as friend template <typename T>class C3 { friend T; //type T is friend of C3 instantiated by T }; if a template class contains static members, each type instantiated class has its own static members. if we access a type name from a template class, we need to use the key word typename to explicitly ask compiler treats the name as a type name. we can define default template argument, like code below. template <typename T, typename F = less<T>> int compare(const T& v1, const T& v2, F f=F()){ if (f(v1,v2)) return -1; if (f(v2,v1)) return 1; return 0; } //even if all the parameters of a template's typename parameter list is default argued //we have to use angle brackets to ask compiler instantiate a class from a template template <typename T = int> class tmp_array{/*details*/}; tmp_array<> a; Besides, it is known that once we define a template class' type, compiler instantiates a class instance. But this activity faces an embarrassing situation. Once we create a project and use template class with the same type in different file, the compiler will instantiates several instances in each file. Which may be a mass overhead. We can use the key word extern to declare a class to prevent from such overhead. extern template class Blob<string>; //declaration template int compare(const int&, const int&); //definition //in this case, compiler will instantiates the whole members //thus the type must apply to every member int main() { Blob<string> sa1, sa2; //compiler instantiates class in other file //Thus key word extern expresses that there is a definition in our project } and if we can't make sure what the return type definitely is, we can use the tail-set return to declare function's return type //using tail-set return to explicitly declare function's return type template <typename It> auto fcn(It beg, It end) -> decltype(*beg) { //details return *beg; } reference collapsing: X& &, X& &&, X&& & will collapse to X& X&& && will be collapse to X&& By define a parameter as an rvalue reference, we can save all of argument's type-info. By using reference, we can save the const-info. By define parameters as rvalue references, we can use reference collapsing to save arguments' reference characteristic. template <typename F,typename T1, typename T2> void flip(F f, T1 &&t1, T2 &&t2) { f(t1, t2); } However, function expression returns an lvalue, which restrict us from binding an rvalue reference to an rvalue reference. In this case, we need to use the lib function std::forward , which is defined in lib utility , to save the reference type(by using the reference collapsing). Thus, we modifies the original code to the below one template <typename F,typename T1, typename T2> void flip(F f, T1 &&t1, T2 &&t2) { f(std::forward<T1>(t1), std::forward<T2>(t2)); } When we overload a template function, compiler will chose the more specialized one. Thus if we define a template function template <typename T> string func(T &a) {/*details*/} template <typename T> string func(T *a) {/*details*/} and we hope the compiler may cope with char & const char as string , we need to define two specialized overloaded function string func(const string&); //declare a string type instance to avoid from default call string func(char *p) {return func(string(p));} string func(const char *p) {return func(string(p));} parameter packet we use symbol ... after keyword typename or class to express indefinite number of parameters //Args is a template parameter packet, rest is a function parameter packet //Args means zero or several template parameters //rest means zero or several function parameters //types in packet can be different from each other template <typename T, typename... Args> void foo(const T &t, const Args&... rest){ cout<<T<<\"\\t\"; print(cout, rest)...; return; } we can use sizeof to calculate the number of parameters in the packet call packet parameters : //end the recursion and print the last element template <typename T> ostream &print(ostream &os, const T &t) { return os << t; } //recursion call template <typename T, typename... Args> ostream &print(ostream &os, const T &t, const Args&... rest) { os << t << \"\\t\"; return print(os, rest...); } int main() { int i = 1; double d = 2.0; long l = 321; string s = \"hello world!\"; foo(cout, i, d, l, s); return 0; } //output:1 2 321 hello world! specialize //specialize template <typename T> int compare(const T &, const T &); template <size_t N, size_t M> int compare(const char(&)[N], const char(&)[M]); //const char(&)[M] is a reference to an char array //a specialized instance of function compare template <> int compare(const char *const &, const char *const &);//a reference to an const (or not) pointer notice : Once we need a specialized instance but forget to declare or define one, where there is a template suits to this instance's type, the compiler will instantiate an instance. This mistake won't be checked up. Thus we are supposed to define templates with the same name in the same header file. And put the specialized instances after those template. Certainly we need to check up whether we have declared an instance or not.","title":"C++ learning notes"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#c-learning-notes","text":"","title":"C++ learning notes"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#generic-algorithm","text":"","title":"Generic algorithm"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#lambda","text":"[capture list] (parameter list) -> return type {function body} we can ignore the parameter list and return type , but the capture list and the function body must be reserved eg: [](const string &a, const string &b) {return a.size() < b.size();}","title":"lambda"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#dynamic-memory","text":"","title":"dynamic memory"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#shared_ptr","text":"use function make_shared<>()","title":"shared_ptr&lt;&gt;"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#unique_ptr","text":"must be initialized once the pointer is created","title":"unique_ptr&lt;&gt;"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#weak_ptr","text":"can be assigned","title":"weak_ptr&lt;&gt;"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#allocator","text":"allocator<string> alloc; auto const p = alloc.allocate(n); weak_ptr<string[]> q = p; for(int i = 0; i != n; ++ i){ alloc.construct(q++, \"hello world!\"); } for (int i = 0; i != n; ++i) { cout << *(p + i) << endl; } alloc.deallocate(p,n); cpp delete p; //provided p points to an object or be nullptr delete [] p; //provided p points to an array or be nullptr","title":"allocator"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#copy-assign-and-destroy","text":"","title":"Copy, Assign and Destroy"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#specific-member-function-to-control-above-three-operations","text":"copy constructor copy-assignment operator move constructor move-assignment operator destructor","title":"specific member function to control above three operations"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#copy-constructor","text":"class Foo { public: /* *default defination in class body is inline *if we don't hope so, we need to define \"= default\" out of the class body *generally, function defined in class body is inline */ Foo() = default; //default constructor Foo(const Foo&); //copy constructor //first parameter must be a reference, and almost always be a const reference } class Foo2{ public: //explicit prevents implicit conversion explicit Foo2() = default; explicit Foo2(int num): n(num) {} private: int n; };","title":"copy constructor"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#copy-assignment-constructor","text":"class Foo { public: /* *we define a copy-assignment constructor below *keyword operator+symbol is an overloaded operator *which defines an operator(like =,+,- and so on) */ Foo &operator=(const Foo& f){ this->n = f->n; return *this; } private: int n; } int main(){ Foo f1, f2(); //f2 is default initialized f1 = f2; //equals to f1(f2) };","title":"copy-assignment constructor"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#stop-the-copy","text":"if we don't want a copy operation, we need to define it as the delete function class NoCopy { public: NoCopy() = default; /* *\"= delete\" must be present when we firstly declare it. * *by the way, we can delete any functions(except the destructor), *thongh i haven't clearly understood its effect and affect. *one interesting and meaningful example is, if a class's member *can't be implicitly initialized, copied, assigned or destroied, *its implicit initializer's member function is deleted. *It prevents from creating indestructible object. * *principle: destructor can't be delete */ NoCopy(const NoCopy &) = delete; //stop the copy NoCopy &operator=(const NoCopy &) = delete; //stop the copy-assignment ~NoCopy() = default; /* *we can put the copy constructor into private zone to prevent from copying it. *we need to declare it in the private zone first *then define it in the public zone.(in order to prevent friend use it) *however, this practice is not recommended. */ }","title":"stop the copy"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#destructor","text":"destructor delete the resource used by objects, and destruct non-static elements it is used whenever the object is destroyed implicitly destruct a pointer won't delete the object it points. on the contrary, smart pointer is class type with destructor, thus it can delete the object class Foo { public: ~Foo() = default; //destructor.this function can't be overloaded };","title":"destructor"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#principle","text":"define destructor before assuring weather it needs a destructor or not if a class needs a copy constructor, it always need a copy-assignment constructor. And vice verse","title":"principle"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#copy-control-and-resource-management","text":"behave like a value: the copy and the original object is fully independent behave like a pointer: the copy and the original object point to the same underlying data","title":"copy control and resource management"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#classes-which-behave-like-a-value","text":"class HasPtr { public: HasPtr(const std::string &s = std::string()): ps(new std::string(s)), i(0) {} //every HasPtr's copy has its own string member with equal value HasPtr(const HasPtr &p): ps(new std::string(*(p.ps))), i(p.i) {} /* *most copy assignment constructor combines the function *of destructor and copy constructor. * *for instance, copy assignment constructor *destroys the left side object's resource as destructor, *and copies data from the right side object *to the left one like copy constructor * *if possible, copy assignment constructor should be exception safe. *which means when an exception occurs, *it can put the left side object in a meaningful state */ HasPtr &operator=(const HasPtr &); ~HasPtr() { delete ps; } private: std::string *ps; int i; }; /* *in this case, to ensure exception safety, *we copy the right object's data first *to ensure exception safety before assignment. *then we delete the resource of the left object and execute assignment */ HasPtr &HasPtr::operator=(const HasPtr &rhs) { auto newp = new std::string(*rhs.ps); delete ps; ps = newp; i = rhs.i; return *this; }","title":"classes which behave like a value"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#classes-which-behave-like-a-pointer","text":"use reference count to control the underlying data class HasPtr { public: HasPtr(const std::string &s = std::string()): ps(new std::string(s)), i(0), use(new std::size_t(1)) {} //copy the pointer to ensure they point to the same underlying data //increase the reference count HasPtr(const HasPtr &p): ps(p.ps), i(p.i), use(p.use) { ++*use; } HasPtr &operator=(const HasPtr &); ~HasPtr(); private: std::string *ps; int i; std::size_t *use; //reference count }; HasPtr::~HasPtr() { if (--*use == 0) { delete ps; delete use; } } HasPtr &HasPtr::operator=(const HasPtr &rhs) { ++*rhs.use; //execute the left object's destructor if (--*use == 0) { delete ps; delete use; } //execute assignment ps = rhs.ps; i = rhs.i; use = rhs.use; return *this; }","title":"classes which behave like a pointer"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#swap","text":"we can swap the pointer to decrease extra memory allocation class HasPtr { friend void swap(HasPtr &, HasPtr &); } /* *if a menber of a class has its own swap function, *use the std::swap is an error *and if we implicitly use swap function, the compiler use the overloaded one by default */ inline void swap(HasPtr &lhs, HasPtr &rhs){ using std::swap; swap(lhs.ps,rhs.ps); swap(lhs.i, rhs.i); } int main(){ HasPtr h1(),h2(); using std::swap; swap(h1,h2); //use the overloaded one } //tip:this function can't overload the HasPtr &HasPtr::operator=(HasPtr &rhs) HasPtr &HasPtr::operator=(HasPtr rhs){ //parameter is a copy, not a reference swap(*this, rhs); return *this; //rhs is destroyed };","title":"swap"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#move-constructor","text":"library container, string and shared_ptr class support both move and copy operation IO class and unique_ptr class can be moved, but can't be copied rvalue reference must be bound to an rvalue. we get rvalue reference through && instead of & rvalue reference must be bound to an object ready to be destroyed therefore, we can freely move an rvalue reference resource to another object moreover, we can bound a const lvalue reference to an rvalue, as well expression returns an rvalue. But rvalue reference variate itself is a lvalue eg: cpp int i = 42; int &r = i; const int &r2 = i * 42; int &&r3 = i * 42; int &&r4 = r3; //illegal all of them is legal except the last one std::move avails to use a lvalue as an rvalue. What's more, we must recognize that executing move means we promote not to use the original element unless we assign or destruct it. int &&r4 = std::move(r3); //legal //use std::move instead of move in order to prevent from potential naming conflict an example of move constructor StrVec::StrVec(StrVec &&s) noexcept //move operation shouldn't throw error //initializer take over resource of s : elements(s.elements), first_feet(s.first_feet), cap(s.cap) { s.elements = s.first_feet = s.cap = nullptr; //brilliant! //get the spark of controlling dynamic memory! //now destructing s is safe //i wander weather we permit s to be meaningfully assigned, //and after insperation, i find that void StrVec::push_back(const std::string &) //has considered this situation. Now both assignment and destruction is ligal. //and at the same time we can't read its value //(certainly i put the whole code into my cpp file to avoid making my notes bloated) }","title":"move constructor"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#move-assignment-constructor","text":"StrVec &StrVec::operator=(StrVec &&rhs) noexcept { //check self-assignment //I guess this operation is designed to avoid freeing itself //otherwise it may move meaningless data and put itself in a meaningless state if (this != &rhs) { free(); //release itself elements = rhs.elements; first_feet = rhs.first_feet; cap = rhs.cap; //put rhs in a destructible state rhs.elements = rhs.first_feet = rhs.cap = nullptr; } return *this; } //copy and move operation's overload StrVec v1, v2; v1 = v2; //copy assignment constructor StrVec getVec(istream &); //getVec returns an rvalue //because getVec() dosen't return value instead of reference //up to now getVec() is just a declaration v2 = getVec(cin); //move assignment constructor /* *if we didn't define a move constructor *the compiler will convert an rvalue reference to a const reference *and call copy constructor */","title":"move assignment constructor"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#reference-qualifier","text":"C++ permit us to assign value to a rvalue object(so weird) eg: string s1(\"a\"), s2(3, 'b'); //s1 = \"a\", s2 = \"bbb\"; /* *(s1 + s2) is an rvalue which never affects s1 and s2's value without assignment *usually it is created by compiler and released soon *the following expression execute: * create a string temp_s = s1 + s2 = \"abbb\"; * assign \"Wow\" to temp_s and return \"Wow\"; * assign \"Wow\" to s3; * release temp_s *Just from my own guess.If there's something wrong, I'll correct it */ string s3 = (s1 + s2) = \"Wow\"; cout << s3 << endl; return 0; we can use the reference qualifier to enforce the left object is an lvalue or an rvalue class Foo { public: //the & in the back of parameter list enforce the left object is an lvalue Foo &operator=(const Foo&) &; // }; Foo &Foo::operator=(const Foo& rhs) &{ // return *this; } class Foo { public: Foo someMember() const &; //const should be in front of reference qualifier } reference qualifier and overloaded class Foo{ public: Foo sorted() &&; Foo sorted() const &; private: vector<int> data; }; //because object is an rvalue, we can change itself without any affection Foo Foo::sorted() &&{ sort(data.begin(), data.end()); return *this; } //object is an lvalue, thus we can't affect its value Foo Foo::sorted() const &{ Foo temp(*this); sort(temp.data.begin(), temp.data.end()); return temp; }","title":"reference qualifier"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#overloading-and-type-conversion","text":"","title":"overloading and type conversion"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#basic-concept","text":"an operator function should be a member of a class or have at least than one class type parameter which means we can't overload operators acting on the build-in type overloaded operator's priority and associative law is the same as the original operator operators can be overloaded + - * / % ^ & ~ ! , = < > <= >= ++ -- << >> == != && += -= /= %= ^= &= = *= <<= >>= [] () -> ->* new new[] delete delete[] operators can not be overloaded :: .* . ? :","title":"basic concept"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#operators","text":"there are various of operators overloading practice. and you know, cujus rei demonstrationem mirabilem sane detexi. Hanc marginis exiguitas non caperet .(I'm sure I've discovered a wonderful demonstration, but the space here is too small to fill it). so I write them all down in my practice .cpp file and just note some announcements there. The essence of operator overloading is a function call. therefore we can't save the original order of evaluation and the short circuit evaluation. and that's why we don't advice you to overload comma, address, logic and, logic or. when we define an operator as a member function, its left operand must be an object of the operator's class. operator(=), index([]), call(()), member accession(->) operator must be member function of class. ostream(<<), istream(>>) can't be member function. index operator usually define two overloading versions, the const one and the nonconst one. increase and decrease operators usually be set as member functions. strBlobPtr &operator++(); //preoperator strBlobPtr operator++(int); //postoperator strBlobPtr strBlobPtr::operator++(int) { strBlobPtr ret = *this; ++*this; return ret; } if we overload the call operator, the object of this class is called function object, because we can call this object. function object is usually used as actual parameter of generic algorithm. moreover, lambda is an unnamed class' unnamed object, whose call operator is overloaded by lambda's function body. liberty functional defines a succession of function class as templates. and they are listed below. arithmetic relation logic plus equal_to logical_and minus not_equal_to logical_or multiplies greater logical_not divides greater_equal modulus less negate less_equal operator type () const is class-type conversions or be named user-define conversions. it allows a type to be an object's return type. this conversion is implicit. we can define explicit conversion operator to control class-type conversion. class SmallInt{ public: SmallInt(int i = 0): val(i) {} explicit operator int() const {return val;} operator=(int); private: int val; }; SmallInt si = 3; static_cast<int>(si) + 3; //explicitly request for type conversion however, if the conversion is used as a condition, the compiler will automatically execute the conversion.","title":"operators"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#function-table","text":"function, function pointer, function class, lambda expression, classes built by bind and any other classes which has overloaded the call operator are all callable object. function class defined in liberty functional can be used to reserve callable object. #include <functional> function<int(int, int)> f1 = add; //f1(4,2) == 6; //equal to add(4,2); //f1 == true; //f1 has a callable object; function<int(int, int)> f2 = [](int a, int b){return i * j;}; we can define a function table to reserve callable objects with same retType(args) . map<string, function<int(int,int)>> binops = { {\"+\", add}, //each element is a pair {\"-\", minus<int>()}, {\"/\", divide()}, {\"*\", [](int i, int j){return i * j;}}, {\"%\", mod}, }; //in this case, binos[\"+\"](4,2) == 6;","title":"function table"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#object-oriented-programming","text":"","title":"Object-Oriented Programming"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#inheritance","text":"class Quote { public: Quote() = default; Quote(const std::string &book, double sales_price): bookNo(book), price(sales_price) {} std::string isbn() const { return bookNo; } //key word virtual defines a virtual function //which means the base class permits drived classes to override it virtual double net_price(std::size_t n) const { return n * price; } //moreover, if we don't wish our clients use the base class' member function //we need to define this member function to be a pure virtual function as the following code row //notice :the pure virtual function can only be defined in the declaration body virtual double net_price(std::size_t n) const = 0; virtual ~Quote() = default; //dynamically bind destructor private: std::string bookNo; /* *key word protected serves for those members *which are not supposed to be used by object's users *but needed to be used by derived class */ protected: double price = 0.0; //common price without discount }; /* *type of class derivation list:colon and a list of base class *whose type is base class behind optional assess specifire *and splited by comma */ class Bulk_quote: public Quote { public: Buli_quote() = default; Built_quote(const std::string &, double, std::size_t, double); /* *key word override explicitly declare that this member function *will be used to redefine the base class' virtual function *if not, the compiler will throw error */ double net_price(std::size_t) const override; private: //the minimum purchase quantity of discount std::size_t min_qty = 0; double discount = 0.0; }; because derived class has its base class member, compiler can implicitly convert it into its base class as a reference or pointer. On the contrary, compiler doesn't allow us to implicitly convert base class object into derived class object. However, if we ensure this action's safety, we can use static_cast enforce the conversion. But this action is not recommended. What's more, if the base class has at least one virtual function, we can use dynamic_cast to check this conversion's safety and let the compiler divides whether allow or not. if a base class defines a static member, the whole inheritance system has only one instance no matter how many derived classes and objects have been defined. base class must be defined before defining derived classes. key word final restrict us from using a class as base class. key word final can be used to declare that a virtual function is the final function, which means this function can't be overrode. class NoDerived final {/*details*/} //illegal, we can't use Noderived as a base class class Bad: public NoDerived {/*details*/} virtual function can have acquiescent parameters, and its acquiescent parameters depend on the static type of the call. class Base{ public: virtual void funcion(int a = 0, int b = 1){/*details*/} } class Derived: public Base{ public: void function(int a = 1, int b = 2) override{/*details*/} } void execuse_function(Base &b){ b.function(); } int main(){ Derived d; execuse_function(d); //execuse Base::function(int a = 0, int b = 1); }","title":"inheritance"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#scope","text":"notions: iff the derived class publicly inherits base class can users use the conversions between derived class and base class. if the derived class publicly or protected inherits base class, the derived class can use the conversions. if the derived class privately inherits base class, the derived class' objects and friends can't use the conversions. friend relationship can't be inherited. each class controls its members' accessible permissions. if we need to change a member's accessible permission, we can use the using declaration in the corresponding action scope class Base{ public: std::size_t size() const {return n;} protected: std::size_t n; } //we inherit the base class in the private scope class Derived: private Base{ public: //then Base::size() is public using Base::size; protected: using Base::n; } acquiescent derived scope operators depend on class' type. struct acquiescently owns public scope while class having private scope. derived class' scope is combined into base class' scope. thus derived class' member with the same name as base class' has higher priority. name lookup precedes type lookup. function declared in the inner scope won't override but cover the outer scope's function.(which remind us to use the override key word. otherwise we must ensure that the derived class's function has the same parameters list as the base class') struct Base{ int memfunc(); } struct Derived: Base{//Base's scope operator is public int memfunc(int); } Derived d; Base b; b.memfunc(); d.memfunc(10); d.memfunc(); //error:Base::memfunc() is hided. the right way is written below d.Base::memfunc();","title":"scope"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#dynamic-binding","text":"double print_total(ostream &os, const Quote &item, size_t n) { //calling Quote::net_price or Bulk_quote::net_price //depends on item's object type //moreover, accessible members which we can use depend on the static type //for instance, this item below has no right to use Bulk_quote's unique public members double ret = item.net_price(n); os << \"ISBN: \" << item.isbn() << \"# sold: \" << n << \"total due: \" << ret << endl; return ret; } //if we don'y want to use dynamic binding, we need to explicitly declare the scope double ret = item->Quote::net_price(42); now, we need to consider this situation where we delete a derived object pointed by a base class pointer. we must ensure that the delete command executes the derived object's destructor. So we declare the base class' destructor as a virtual function to solve this problem. what's more, virtual destructor will impede generating movement operation. What's more, if we use containers to save objects, it is supposed to indirectly save it. An common usage is using pointer. Then we are able to use base class pointer calling derived objects.","title":"dynamic binding"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#template","text":"template <typename T> //key word:template //<template T> is template parameter list //template parameters are divided by comma /* *moerover, key word typename is the same with key word class in this situation */ int compare(const T& v1, const T& v2) { if (v1 > v2) return -1; else if (v2 < v1) return 1; else return 0; } //type parameter can be used as return type or parameter type //it can be used as variables declaration and type translation, as well template <typename T> T foo(T* p) { T tmp = *p; //omitted details return T; } /* *we can define nontype parameter and the parameter's value is provided by *clients or compiler *in this case, compiler provide nontype parameters int values depends on *const char array's length *nontype parameter can be int, object/function pointer or lvalue reference */ template<unsigned N, unsigned M> int compare(const char (&p1)[N], const char (&p2)[M]){ return strcmp(p1,p2); } /* *template can be declared as inline or constexpr *this declaration should be put between template parameter list and return type */ template<typename T> inline T min(const T&, const T&); principle : template function's parameters are supposed to be const reference, which guarantees non-copyable object's availability. if we want to define a class member function out of the class body, it's type should be: template <typename> return-type class-name::member-name(parameter-list) {function-bod} By default, template class' member function is instantiated when it is called, which help us to use a template class even though there are some member function incompatible with a type, we can use part of class functions.","title":"template"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#friend-declaration","text":"//friend declaration template <typename T> class Pal; class C { friend class Pal<C>; //Pal instantiated by class C is a friend template <typename T> friend class Pal2; //each instantiated Pal2 is C's friend }; template <typename T> class C2 { friend class Pal<T>; template <typename X> friend class Pal2;//each instantiated Pal2 is each instantiated C2's friend //notice: friend's typename should be different from template class' friend class Pal3; //Pal3 is a non-template class, every instantiated C2 is Pal3's friend }; //let template's typename as friend template <typename T>class C3 { friend T; //type T is friend of C3 instantiated by T }; if a template class contains static members, each type instantiated class has its own static members. if we access a type name from a template class, we need to use the key word typename to explicitly ask compiler treats the name as a type name. we can define default template argument, like code below. template <typename T, typename F = less<T>> int compare(const T& v1, const T& v2, F f=F()){ if (f(v1,v2)) return -1; if (f(v2,v1)) return 1; return 0; } //even if all the parameters of a template's typename parameter list is default argued //we have to use angle brackets to ask compiler instantiate a class from a template template <typename T = int> class tmp_array{/*details*/}; tmp_array<> a; Besides, it is known that once we define a template class' type, compiler instantiates a class instance. But this activity faces an embarrassing situation. Once we create a project and use template class with the same type in different file, the compiler will instantiates several instances in each file. Which may be a mass overhead. We can use the key word extern to declare a class to prevent from such overhead. extern template class Blob<string>; //declaration template int compare(const int&, const int&); //definition //in this case, compiler will instantiates the whole members //thus the type must apply to every member int main() { Blob<string> sa1, sa2; //compiler instantiates class in other file //Thus key word extern expresses that there is a definition in our project } and if we can't make sure what the return type definitely is, we can use the tail-set return to declare function's return type //using tail-set return to explicitly declare function's return type template <typename It> auto fcn(It beg, It end) -> decltype(*beg) { //details return *beg; }","title":"friend declaration"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#reference-collapsing","text":"X& &, X& &&, X&& & will collapse to X& X&& && will be collapse to X&& By define a parameter as an rvalue reference, we can save all of argument's type-info. By using reference, we can save the const-info. By define parameters as rvalue references, we can use reference collapsing to save arguments' reference characteristic. template <typename F,typename T1, typename T2> void flip(F f, T1 &&t1, T2 &&t2) { f(t1, t2); } However, function expression returns an lvalue, which restrict us from binding an rvalue reference to an rvalue reference. In this case, we need to use the lib function std::forward , which is defined in lib utility , to save the reference type(by using the reference collapsing). Thus, we modifies the original code to the below one template <typename F,typename T1, typename T2> void flip(F f, T1 &&t1, T2 &&t2) { f(std::forward<T1>(t1), std::forward<T2>(t2)); } When we overload a template function, compiler will chose the more specialized one. Thus if we define a template function template <typename T> string func(T &a) {/*details*/} template <typename T> string func(T *a) {/*details*/} and we hope the compiler may cope with char & const char as string , we need to define two specialized overloaded function string func(const string&); //declare a string type instance to avoid from default call string func(char *p) {return func(string(p));} string func(const char *p) {return func(string(p));}","title":"reference collapsing:"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#parameter-packet","text":"we use symbol ... after keyword typename or class to express indefinite number of parameters //Args is a template parameter packet, rest is a function parameter packet //Args means zero or several template parameters //rest means zero or several function parameters //types in packet can be different from each other template <typename T, typename... Args> void foo(const T &t, const Args&... rest){ cout<<T<<\"\\t\"; print(cout, rest)...; return; } we can use sizeof to calculate the number of parameters in the packet call packet parameters : //end the recursion and print the last element template <typename T> ostream &print(ostream &os, const T &t) { return os << t; } //recursion call template <typename T, typename... Args> ostream &print(ostream &os, const T &t, const Args&... rest) { os << t << \"\\t\"; return print(os, rest...); } int main() { int i = 1; double d = 2.0; long l = 321; string s = \"hello world!\"; foo(cout, i, d, l, s); return 0; } //output:1 2 321 hello world!","title":"parameter packet"},{"location":"Programming%20Language/C%2B%2B/C%2B%2B_learning_notes/#specialize","text":"//specialize template <typename T> int compare(const T &, const T &); template <size_t N, size_t M> int compare(const char(&)[N], const char(&)[M]); //const char(&)[M] is a reference to an char array //a specialized instance of function compare template <> int compare(const char *const &, const char *const &);//a reference to an const (or not) pointer notice : Once we need a specialized instance but forget to declare or define one, where there is a template suits to this instance's type, the compiler will instantiate an instance. This mistake won't be checked up. Thus we are supposed to define templates with the same name in the same header file. And put the specialized instances after those template. Certainly we need to check up whether we have declared an instance or not.","title":"specialize"}]}